Nadine Shaalan and Bahar Haji-Sheikhi
CS 3500
Summer I 2016

HW 7:
---------------------------------------------------------------------------------------

HOW TO USE:
PLAYING: press the spacebar
PAUSING: press the spacebar
ADDING A NOTE: click anywhere and then enter the prompted information
REMOVING A NOTE: right click on any note
GOING TO BEGINNING: press the home key
GOING TO THE END: press the end key

---------------------------------------------------------------------------------------

MODEL:

---------------------------------------------------------------------------------------

For this weeks assignment, I created a interface and a basic implementation of a
music editor.
The Interface - MusicCreator:
----------------------------
Requires the following functionality
	- add a specified note
	- remove a specified note
	- change an existing note to a specified note
	- produce a list representation of all the notes being played
	- Combine two music pieces together so that they play one after the other
	- Combine two music pieces so that they play simultaneously
	- Get the total number of beats in a piece
	- Get the list of notes at the specified beat
	- Renders the piece as a string
	- Gets the tempo of the piece

The Implementation of the Interface (The class MusicCreatorImpl):
------------------------------------------------------------------
	I chose to represent a song as a HashMap<Integer,ArrayList<Note>>.
	The Integer key was the beat number, and the ArrayList<Note> were
	the notes at the beat.

	I chose to do this because, a beat number is unique.


	Other Important Design Aspects:
	How you add a note:
		- To add a note, it checks if there is already a beat.
			- If there is an existing key, it adds to the value's Arraylist.
			- If there is not an existing key, it does a similar process as
			 mentioned above,
			but puts a beat pairing in the hash map.
		** YOU CAN HAVE SEPARATE OVERLAPPING NOTES IN THIS IMPLEMENTATION
			- This allows for more efficient removal,
			since you can be sure you have removed the proper note,
			and not one that you had previously replaced.


Helper Class- Note:
-------------------
	A note contains the starting beat, the Key (number to represent the key and
	the octave),
	the pitch, the octave, the instrument, and the volume

	The important design aspects of the Note class are:
	How you create one:
		-  A beat has a duration but it only exists in the arraylist of the beat
		it starts on

---------------------------------------------------------------------------------------

VIEW:

---------------------------------------------------------------------------------------

Interface: IView
----------------
This class represents the different types of views for this assignment. It has one
method initialize(), which starts the desired view type.

Interface: GuiView
-------------------
This class represents a view that has the capability to handle keyboard and mouse events.
It extends the IView interface.

Interface Playable
-------------------
This class represents a view that can be played: meaning it has the functionality to be
played, paused, skipped to the end, and brought to the beginning.

Class: ConsoleView
-------------------
To render a Composition,
I created an ArrayList<ArrayList<String>> and then appended the strings to form the final
“image”.This is because I saw the console as a grid, and the easiest way to
access/modify information in a grid like structure is a 2 dimensional list.

Class: MidiViewImpl
-------------------
To play a composition out loud.
Implements a sequencer to do this.
Adds each note--via a midiEvent--, by using the interface's notesAtBeat method
(which gets the arraylist of note at the given beat) to a track, which
gets added to a sequence, which gets added to the sequencer.
And then starts the sequencer.

Changes made for hw07:
MidiViewImpl now implements the Playable interface and thus has the methods:
play, pause, reset, skipToEnd, isPlaying, and getBeat.
a boolean field was added: isPlaying to help with these methods.

Class: ConcreteGuiViewPanel:
----------------------------
Paints the beat, paints the grid, and overrides paintComponent in order to display the GUI.

Changes made for hw07:
a tick, prevTick, and xLocation instance variables were added to keep track of
where the red line should be drawn.
A setTick method was created to allow the functionality to mutate the tick.
Subsequently, a paintLine method was added to draw the red line in the panel.
Protected methods were added for each method in the playable interface, even though
this method does NOT implement the playable interface. They were added as helpers
to the public methods in the guiViewFrame class.
UpdateTime() was added in order to update the xLocation, tick, and prevTick

Class: GuiViewFrame:
--------------------
Using the ConcreteGuiViewPanel class, adds the grid and the notes to a frame.
Allows scrolling as well.

Changes made for hw07:
This class implements the Playable interface and thus has the methods:
play, pause, reset, skipToEnd, isPlaying, and getBeat.
getBeat returns 0 and isPlaying returns true on default.

Class: MockSequencer:
----------------------
A mock sequencer that when start() is called, accumulates information about the midiEvents in a
StringBuilder().

Class: CompositeView:
----------------------
A class that has a gui and a midi. Synchronizes the gui and the midi such that the gui displays
its red line bar at the beat number that the midi plays.

---------------------------------------------------------------------------------------

CONTROLLER:

---------------------------------------------------------------------------------------

Class: KeyboardHandler:
-----------------------
Allows the functionality to take in input from the keyboard.


Class: MouseListener:
---------------------
Allows the functionality to take in input from the mouse.


Class: MouseController:
------------------------
Takes input from the keyboard and mouse, allows the model
to react to the input, and the view to display it.





